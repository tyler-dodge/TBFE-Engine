# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_UI', [dirname(__file__)])
        except ImportError:
            import _UI
            return _UI
        if fp is not None:
            try:
                _mod = imp.load_module('_UI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _UI = swig_import_helper()
    del swig_import_helper
else:
    import _UI
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import Misc
class Window:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Window, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Window, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _UI.new_Window(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _UI.delete_Window
    __del__ = lambda self : None;
    def renderElements(self, *args): return _UI.Window_renderElements(self, *args)
    def addElement(self, *args): return _UI.Window_addElement(self, *args)
    def getElement(self, *args): return _UI.Window_getElement(self, *args)
    def getDimensions(self): return _UI.Window_getDimensions(self)
    def setDimensions(self, *args): return _UI.Window_setDimensions(self, *args)
    def getScreenPosition(self): return _UI.Window_getScreenPosition(self)
    def setScreenPosition(self, *args): return _UI.Window_setScreenPosition(self, *args)
    def getVisibility(self): return _UI.Window_getVisibility(self)
    def setVisibility(self, *args): return _UI.Window_setVisibility(self, *args)
    def getShowBackground(self): return _UI.Window_getShowBackground(self)
    def setShowBackground(self, *args): return _UI.Window_setShowBackground(self, *args)
Window_swigregister = _UI.Window_swigregister
Window_swigregister(Window)

class Element:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getBackground(self): return _UI.Element_getBackground(self)
    def setBackground(self, *args): return _UI.Element_setBackground(self, *args)
    def getPosition(self): return _UI.Element_getPosition(self)
    def setPosition(self, *args): return _UI.Element_setPosition(self, *args)
    def getDimensions(self): return _UI.Element_getDimensions(self)
    def setDimensions(self, *args): return _UI.Element_setDimensions(self, *args)
    def getName(self): return _UI.Element_getName(self)
    def setName(self, *args): return _UI.Element_setName(self, *args)
    def getProperty(self, *args): return _UI.Element_getProperty(self, *args)
    def setProperty(self, *args): return _UI.Element_setProperty(self, *args)
    def getVisibility(self): return _UI.Element_getVisibility(self)
    def setVisibility(self, *args): return _UI.Element_setVisibility(self, *args)
    def drawBorders(self): return _UI.Element_drawBorders(self)
    def renderElement(self): return _UI.Element_renderElement(self)
    def reload(self): return _UI.Element_reload(self)
    __swig_destroy__ = _UI.delete_Element
    __del__ = lambda self : None;
Element_swigregister = _UI.Element_swigregister
Element_swigregister(Element)

class Label(Element):
    __swig_setmethods__ = {}
    for _s in [Element]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Label, name, value)
    __swig_getmethods__ = {}
    for _s in [Element]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Label, name)
    __repr__ = _swig_repr
    def renderElement(self): return _UI.Label_renderElement(self)
    def __init__(self, *args): 
        this = _UI.new_Label(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _UI.delete_Label
    __del__ = lambda self : None;
    def reload(self): return _UI.Label_reload(self)
Label_swigregister = _UI.Label_swigregister
Label_swigregister(Label)

class StatBar(Element):
    __swig_setmethods__ = {}
    for _s in [Element]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StatBar, name, value)
    __swig_getmethods__ = {}
    for _s in [Element]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StatBar, name)
    __repr__ = _swig_repr
    def renderElement(self): return _UI.StatBar_renderElement(self)
    def reload(self): return _UI.StatBar_reload(self)
    def __init__(self, *args): 
        this = _UI.new_StatBar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _UI.delete_StatBar
    __del__ = lambda self : None;
StatBar_swigregister = _UI.StatBar_swigregister
StatBar_swigregister(StatBar)

class ImageBox(Element):
    __swig_setmethods__ = {}
    for _s in [Element]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Element]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageBox, name)
    __repr__ = _swig_repr
    def renderElement(self): return _UI.ImageBox_renderElement(self)
    def __init__(self, *args): 
        this = _UI.new_ImageBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def reload(self): return _UI.ImageBox_reload(self)
    __swig_destroy__ = _UI.delete_ImageBox
    __del__ = lambda self : None;
ImageBox_swigregister = _UI.ImageBox_swigregister
ImageBox_swigregister(ImageBox)


def loadWindows(*args):
  return _UI.loadWindows(*args)
loadWindows = _UI.loadWindows

def addWindowType(*args):
  return _UI.addWindowType(*args)
addWindowType = _UI.addWindowType

def getWindowType(*args):
  return _UI.getWindowType(*args)
getWindowType = _UI.getWindowType

def createWindow(*args):
  return _UI.createWindow(*args)
createWindow = _UI.createWindow

def deleteWindowList():
  return _UI.deleteWindowList()
deleteWindowList = _UI.deleteWindowList
class TextBox(Element):
    __swig_setmethods__ = {}
    for _s in [Element]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Element]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextBox, name)
    __repr__ = _swig_repr
    def renderElement(self): return _UI.TextBox_renderElement(self)
    def __init__(self, *args): 
        this = _UI.new_TextBox(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _UI.delete_TextBox
    __del__ = lambda self : None;
    def reload(self): return _UI.TextBox_reload(self)
TextBox_swigregister = _UI.TextBox_swigregister
TextBox_swigregister(TextBox)
cvar = _UI.cvar



