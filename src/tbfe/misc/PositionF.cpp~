  PositionF()
  {
    X=0;
    Y=0;
    Z=0;
  };
  PositionF(float x,float y,float z)
  {
    X=x;
    Y=y;
    Z=z;
  };
  PositionF operator+(PositionF newPosition)
  {
    newPosition.X+=X;
    newPosition.Y+=Y;
    newPosition.Z+=Z;
    return newPosition;
  };
  PositionF operator+(float a)
  {
    PositionF newPosition;
    newPosition.X=X+a;
    newPosition.Y=Y+a;
    newPosition.Z=Z+a;
    return newPosition;
  };
  PositionF operator-(PositionF newPosition)
  {
    newPosition.X-=X;
    newPosition.Y-=Y;
    newPosition.Z-=Z;
    return newPosition;
  };
  void operator+=(PositionF newPosition)
  {
    X+=newPosition.X;
    Y+=newPosition.Y;
    Z+=newPosition.Z;
  };
  void operator-=(PositionF newPosition)
  {
    X-=newPosition.X;
    Y-=newPosition.Y;
    Z-=newPosition.Z;
  };
  PositionF operator*(float num)
  {
    PositionF newPosition;
    newPosition.X=X*num;
    newPosition.Y=Y*num;
    newPosition.Z=Z*num;
    return newPosition;
  };
  PositionF operator/(float num)
  {
    PositionF newPosition;
    newPosition.X=X/num;
    newPosition.Y=Y/num;
    newPosition.Z=Z/num;
    return newPosition;
  };
  string dumpString()
  {
    std::stringstream text;
    text << '(' << X << ',' << Y << ',' << Z << ')';
    return text.str();
  };
  PositionF operator*(Matrix matrix)
  {
    PositionF position;
    position.X=X*matrix[0]+Y*matrix[1]+Z*matrix[2];
    position.Y=X*matrix[4]+Y*matrix[5]+Z*matrix[6];
    position.Z=X*matrix[8]+Y*matrix[9]+Z*matrix[10];
    return position;
  };
