# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _Map
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


import Misc
class Map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Map, name)
    __repr__ = _swig_repr
    def loadPlants(*args): return _Map.Map_loadPlants(*args)
    def addPlantType(*args): return _Map.Map_addPlantType(*args)
    def __init__(self, *args): 
        this = _Map.new_Map(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Map.delete_Map
    __del__ = lambda self : None;
    def generateMap(*args): return _Map.Map_generateMap(*args)
    def loadMap(*args): return _Map.Map_loadMap(*args)
    def dumpMap(*args): return _Map.Map_dumpMap(*args)
    def collisionTest(*args): return _Map.Map_collisionTest(*args)
    def addLayer(*args): return _Map.Map_addLayer(*args)
    def getLayerVisibility(*args): return _Map.Map_getLayerVisibility(*args)
    def setLayerVisibility(*args): return _Map.Map_setLayerVisibility(*args)
    def getNumberOfLayers(*args): return _Map.Map_getNumberOfLayers(*args)
    def getDimensions(*args): return _Map.Map_getDimensions(*args)
    def setPlantData(*args): return _Map.Map_setPlantData(*args)
    def changeTile(*args): return _Map.Map_changeTile(*args)
    def getTile(*args): return _Map.Map_getTile(*args)
    def addTileSet(*args): return _Map.Map_addTileSet(*args)
    def getTileSet(*args): return _Map.Map_getTileSet(*args)
    def getNumberOfTileSets(*args): return _Map.Map_getNumberOfTileSets(*args)
Map_swigregister = _Map.Map_swigregister
Map_swigregister(Map)

class OverMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OverMap, name)
    __repr__ = _swig_repr
    def getPoint(*args): return _Map.OverMap_getPoint(*args)
    __swig_setmethods__["MapLocations"] = _Map.OverMap_MapLocations_set
    __swig_getmethods__["MapLocations"] = _Map.OverMap_MapLocations_get
    if _newclass:MapLocations = _swig_property(_Map.OverMap_MapLocations_get, _Map.OverMap_MapLocations_set)
    def __init__(self, *args): 
        this = _Map.new_OverMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Map.delete_OverMap
    __del__ = lambda self : None;
    def GetPosition(*args): return _Map.OverMap_GetPosition(*args)
    def SetPosition(*args): return _Map.OverMap_SetPosition(*args)
    def SetPoint(*args): return _Map.OverMap_SetPoint(*args)
    def GetWidth(*args): return _Map.OverMap_GetWidth(*args)
    def GetHeight(*args): return _Map.OverMap_GetHeight(*args)
    def PlayerMove(*args): return _Map.OverMap_PlayerMove(*args)
OverMap_swigregister = _Map.OverMap_swigregister
OverMap_swigregister(OverMap)

class TileLayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TileLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Map.new_TileLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateMap(*args): return _Map.TileLayer_generateMap(*args)
    def getDimensions(*args): return _Map.TileLayer_getDimensions(*args)
    def getTile(*args): return _Map.TileLayer_getTile(*args)
    def changeTile(*args): return _Map.TileLayer_changeTile(*args)
    def getVisibility(*args): return _Map.TileLayer_getVisibility(*args)
    def setVisibility(*args): return _Map.TileLayer_setVisibility(*args)
    __swig_destroy__ = _Map.delete_TileLayer
    __del__ = lambda self : None;
TileLayer_swigregister = _Map.TileLayer_swigregister
TileLayer_swigregister(TileLayer)



