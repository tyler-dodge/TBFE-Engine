# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Map', [dirname(__file__)])
        except ImportError:
            import _Map
            return _Map
        if fp is not None:
            try:
                _mod = imp.load_module('_Map', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Map = swig_import_helper()
    del swig_import_helper
else:
    import _Map
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


import Misc
class Map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Map, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Map.new_Map()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Map.delete_Map
    __del__ = lambda self : None;
    def generateMap(self, *args): return _Map.Map_generateMap(self, *args)
    def loadMap(self, *args): return _Map.Map_loadMap(self, *args)
    def dumpMap(self, *args): return _Map.Map_dumpMap(self, *args)
    def collisionTest(self, *args): return _Map.Map_collisionTest(self, *args)
    def addLayer(self, *args): return _Map.Map_addLayer(self, *args)
    def getLayerVisibility(self, *args): return _Map.Map_getLayerVisibility(self, *args)
    def setLayerVisibility(self, *args): return _Map.Map_setLayerVisibility(self, *args)
    def getNumberOfLayers(self): return _Map.Map_getNumberOfLayers(self)
    def getDimensions(self): return _Map.Map_getDimensions(self)
    def checkChanged(self): return _Map.Map_checkChanged(self)
    def setChanged(self, *args): return _Map.Map_setChanged(self, *args)
    def changeTile(self, *args): return _Map.Map_changeTile(self, *args)
    def getTile(self, *args): return _Map.Map_getTile(self, *args)
    def addTileSet(self, *args): return _Map.Map_addTileSet(self, *args)
    def getTileSet(self, *args): return _Map.Map_getTileSet(self, *args)
    def getNumberOfTileSets(self): return _Map.Map_getNumberOfTileSets(self)
Map_swigregister = _Map.Map_swigregister
Map_swigregister(Map)

class OverMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OverMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OverMap, name)
    __repr__ = _swig_repr
    def getPoint(self, *args): return _Map.OverMap_getPoint(self, *args)
    __swig_setmethods__["MapLocations"] = _Map.OverMap_MapLocations_set
    __swig_getmethods__["MapLocations"] = _Map.OverMap_MapLocations_get
    if _newclass:MapLocations = _swig_property(_Map.OverMap_MapLocations_get, _Map.OverMap_MapLocations_set)
    def __init__(self, *args): 
        this = _Map.new_OverMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Map.delete_OverMap
    __del__ = lambda self : None;
    def GetPosition(self): return _Map.OverMap_GetPosition(self)
    def SetPosition(self, *args): return _Map.OverMap_SetPosition(self, *args)
    def SetPoint(self, *args): return _Map.OverMap_SetPoint(self, *args)
    def GetWidth(self): return _Map.OverMap_GetWidth(self)
    def GetHeight(self): return _Map.OverMap_GetHeight(self)
    def PlayerMove(self, *args): return _Map.OverMap_PlayerMove(self, *args)
OverMap_swigregister = _Map.OverMap_swigregister
OverMap_swigregister(OverMap)

class TileLayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TileLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TileLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Map.new_TileLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateMap(self, *args): return _Map.TileLayer_generateMap(self, *args)
    def getDimensions(self): return _Map.TileLayer_getDimensions(self)
    def getTile(self, *args): return _Map.TileLayer_getTile(self, *args)
    def changeTile(self, *args): return _Map.TileLayer_changeTile(self, *args)
    def getVisibility(self): return _Map.TileLayer_getVisibility(self)
    def setVisibility(self, *args): return _Map.TileLayer_setVisibility(self, *args)
    __swig_destroy__ = _Map.delete_TileLayer
    __del__ = lambda self : None;
TileLayer_swigregister = _Map.TileLayer_swigregister
TileLayer_swigregister(TileLayer)



